<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.haoge.travel.mapper.ResponseMapper">
  <resultMap id="BaseResultMap" type="com.haoge.travel.model.Response">
    <id column="response_id" jdbcType="INTEGER" property="responseId" />
    <result column="likes" jdbcType="INTEGER" property="likes" />
    <result column="collections" jdbcType="INTEGER" property="collections" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.haoge.travel.model.Response">
    <result column="response_body" jdbcType="LONGVARBINARY" property="responseBody" />
  </resultMap>
  <sql id="Base_Column_List">
    response_id, likes, collections, user_id, create_time
  </sql>
  <sql id="Blob_Column_List">
    response_body
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from responses
    where response_id = #{responseId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from responses
    where response_id = #{responseId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.haoge.travel.model.Response">
    insert into responses (response_id, likes, collections, 
      user_id, create_time, response_body
      )
    values (#{responseId,jdbcType=INTEGER}, #{likes,jdbcType=INTEGER}, #{collections,jdbcType=INTEGER}, 
      #{userId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{responseBody,jdbcType=LONGVARBINARY}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.haoge.travel.model.Response">
    insert into responses
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="responseId != null">
        response_id,
      </if>
      <if test="likes != null">
        likes,
      </if>
      <if test="collections != null">
        collections,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="responseBody != null">
        response_body,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="responseId != null">
        #{responseId,jdbcType=INTEGER},
      </if>
      <if test="likes != null">
        #{likes,jdbcType=INTEGER},
      </if>
      <if test="collections != null">
        #{collections,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="responseBody != null">
        #{responseBody,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.haoge.travel.model.Response">
    update responses
    <set>
      <if test="likes != null">
        likes = #{likes,jdbcType=INTEGER},
      </if>
      <if test="collections != null">
        collections = #{collections,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="responseBody != null">
        response_body = #{responseBody,jdbcType=LONGVARBINARY},
      </if>
    </set>
    where response_id = #{responseId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.haoge.travel.model.Response">
    update responses
    set likes = #{likes,jdbcType=INTEGER},
      collections = #{collections,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      response_body = #{responseBody,jdbcType=LONGVARBINARY}
    where response_id = #{responseId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.haoge.travel.model.Response">
    update responses
    set likes = #{likes,jdbcType=INTEGER},
      collections = #{collections,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where response_id = #{responseId,jdbcType=INTEGER}
  </update>
</mapper>